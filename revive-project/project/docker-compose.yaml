version: '2.3'

services:
  ui:
    container_name: ui
    image: devopseasylearning/practical-ui:v1.0.0
    ports:
      - "8888:8080"
    environment:
      JAVA_OPTS: "-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom"
      SERVER_TOMCAT_ACCESSLOG_ENABLED: "true"
      ENDPOINTS_CATALOG: "http://catalog:8080"
      ENDPOINTS_CARTS: "http://carts:8080"
      ENDPOINTS_ORDERS: "http://orders:8080"
      ENDPOINTS_CHECKOUT: "http://checkout:8080"
      ENDPOINTS_ASSETS: "http://assets:8080"
    mem_limit: 256m
    networks: 
      - revive

  assets:
    container_name: assets
    image: devopseasylearning/practical-asset:v1.0.0
    mem_limit: 64m
    networks: 
      - revive
    
  orders:
    container_name: orders
    image: devopseasylearning/practical-orders:v1.0.0
    mem_limit: 256m
    networks: 
      - revive
   
  catalog:
    hostname: catalog
    ports:
      - "8080:8080"
    image: devopseasylearning/practical-catalog:v1.0.0
    environment:
      GIN_MODE: "release"
      DB_PASSWORD: "your_mysql_password"
      DB_MIGRATE: "true"
      DB_CONNECT_TIMEOUT: 5
      DB_HOST: catalog-db
      MYSQL_USER: "your_mysql_user"
      DB_NAME: sampledb
    
    networks: 
      - revive
    depends_on:
      - catalog-db

  checkout:
    container_name: checkout
    image: devopseasylearning/practical-checkout:v1.0.0
    environment:
      REDIS_URL: "redis://checkout-redis:6379"
      ENDPOINTS_ORDERS: "http://orders:8080"
    mem_limit: 256m
    networks: 
      - revive

  carts:
    container_name: carts
    image: devopseasylearning/practical-cart:v1.0.0
    environment:
      JAVA_OPTS: "-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom"
      SERVER_TOMCAT_ACCESSLOG_ENABLED: "true"
      SPRING_PROFILES_ACTIVE: "dynamodb"
      CARTS_DYNAMODB_ENDPOINT: "http://carts-db:8000"
      CARTS_DYNAMODB_CREATETABLE: "true"
      AWS_ACCESS_KEY_ID: "your_aws_access_key_id"
      AWS_SECRET_ACCESS_KEY: "your_aws_secret_access_key"
    mem_limit: 256m
    networks: 
      - revive

  orders-db:
    container_name: orders-db
    image: devopseasylearning/practical-orders-db:v1.0.0
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "your_root_password"
      MYSQL_DATABASE: "your_database_name"
      MYSQL_USER: "your_mysql_user"
      MYSQL_PASSWORD: "your_mysql_password"
    mem_limit: 128m
    networks: 
      - revive

  catalog-db:
    hostname: catalog-db
    image: devopseasylearning/practical-catalog-db:v1.0.0
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      MYSQL_ROOT_PASSWORD: your_root_password
      MYSQL_DATABASE: sampledb
      MYSQL_USER: catalog_user
      MYSQL_PASSWORD: your_mysql_password
    mem_limit: 128m
    networks: 
      - revive

  checkout-redis:
    container_name: checkout-redis
    image: devopseasylearning/practical-checkout-db:v1.0.0
    restart: always
    environment:
      PORT: 8080
    networks: 
      - revive

  carts-db:
    container_name: carts-db
    image: devopseasylearning/practical-cart-db:v1.0.0
    ports:
      - "8000:8000"
    environment:
      JAVA_OPTS: "-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom"
      SERVER_TOMCAT_ACCESSLOG_ENABLED: "true"
      SPRING_PROFILES_ACTIVE: "mysql,rabbitmq"
      SPRING_DATASOURCE_WRITER_URL: "jdbc:mariadb://orders-db:3306/orders"
      SPRING_DATASOURCE_WRITER_USERNAME: "orders_user"
      SPRING_DATASOURCE_WRITER_PASSWORD: "your_orders_db_password"
      SPRING_DATASOURCE_READER_URL: "jdbc:mariadb://orders-db:3306/orders"
      SPRING_DATASOURCE_READER_USERNAME: "orders_user"
      SPRING_DATASOURCE_READER_PASSWORD: "your_orders_db_password"
      SPRING_RABBITMQ_HOST: "rabbitmq"
    mem_limit: 128m
    networks: 
      - revive

  rabbitmq:
    container_name: rabbitmq
    image: devopseasylearning/practical-orders-rabbitmq:v1.0.0
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks: 
      - revive

volumes:
  mysql_data:
  rabbitmq_data:

networks:
  revive:
    driver: bridge
